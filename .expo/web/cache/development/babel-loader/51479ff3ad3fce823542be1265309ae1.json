{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from \"react\";\nimport yelp from \"../api/yelp\";\nexport default (function () {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      results = _useState2[0],\n      setResults = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMessage = _useState4[0],\n      setErrorMessage = _useState4[1];\n\n  var searchApi = function searchApi() {\n    var response;\n    return _regeneratorRuntime.async(function searchApi$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(yelp.get(\"/search\", {\n              params: {\n                limit: 50,\n                term: term,\n                location: \"san jose\"\n              }\n            }));\n\n          case 3:\n            response = _context.sent;\n            setResults(response.data.businesses);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            setErrorMessage(\"Something went wrong\");\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return [searchApi, results, errorMessage];\n});","map":{"version":3,"sources":["C:/react-native/food/hooks/useResults.js"],"names":["useEffect","useState","yelp","results","setResults","errorMessage","setErrorMessage","searchApi","get","params","limit","term","location","response","data","businesses"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP;AAEA,gBAAe,YAAM;AAAA,kBACWD,QAAQ,CAAC,EAAD,CADnB;AAAA;AAAA,MACZE,OADY;AAAA,MACHC,UADG;;AAAA,mBAEqBH,QAAQ,CAAC,EAAD,CAF7B;AAAA;AAAA,MAEZI,YAFY;AAAA,MAEEC,eAFF;;AAInB,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAESL,IAAI,CAACM,GAAL,CAAS,SAAT,EAAoB;AACzCC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,KAAK,EAAE,EADD;AAENC,gBAAAA,IAAI,EAAJA,IAFM;AAGNC,gBAAAA,QAAQ,EAAE;AAHJ;AADiC,aAApB,CAFT;;AAAA;AAERC,YAAAA,QAFQ;AASdT,YAAAA,UAAU,CAACS,QAAQ,CAACC,IAAT,CAAcC,UAAf,CAAV;AATc;AAAA;;AAAA;AAAA;AAAA;AAWdT,YAAAA,eAAe,CAAC,sBAAD,CAAf;;AAXc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAeA,SAAO,CAACC,SAAD,EAAYJ,OAAZ,EAAqBE,YAArB,CAAP;AACD,CApBD","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport yelp from '../api/yelp'\r\n\r\nexport default () => {\r\n  const [results, setResults] = useState([]);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const searchApi = async () => {\r\n    try {\r\n      const response = await yelp.get(\"/search\", {\r\n        params: { \r\n          limit: 50,\r\n          term,\r\n          location: \"san jose\",\r\n        },\r\n      });\r\n      setResults(response.data.businesses);\r\n    } catch (error) {\r\n      setErrorMessage(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return [searchApi, results, errorMessage];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}